<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Admin extends CI_Controller {		function __construct() {		parent::__construct();		$this->template->title('Welcome to CEGHypermarket')				->set('currentSection', 'admin')				->set_layout('default');	}			function index()	{		$this->template->build('admin_index');	}		function login() {		$this->form_validation->set_rules('admin-username', 'User Name', 'trim|required|xss_clean');		$this->form_validation->set_rules('admin-password', 'Password', 'trim|required|min_length[6]|xss_clean|md5');		$this->form_validation->set_rules('admin-comfirm', 'Re-enter Password', 'required|matches[admin-password]');				if ($this->form_validation->run() == true) {			$admin_username = $this->input->post('admin-username');			$admin_password = $this->input->post('admin-password');			if($this->user_model->admin_login($admin_username, $admin_password)) {				redirect('admin/adminPage');			}		}		else			redirect('admin', 'refresh');			}		function adminPage() { 		$admin = $this->user_model->admin();		$data['admin'] = $admin;		$this->template->build('admin_welcome', $data);	}	function logout() {		$this->session->sess_destroy();		redirect('admin');	}		function newAdmin() {		$this->template->build('admin_register');	}		function adminRegistered() {		$this->form_validation->set_rules('admin_username', 'Username', 'required|xss_clean|alpha_dash');		$this->form_validation->set_rules('admin_password', 'Password', 'required|xss_clean|alpha_dash|md5');		$this->form_validation->set_rules('admin_password_confirm', 'Confirm', 'required|matches[admin_password]');		$this->form_validation->set_rules('admin_email', 'Email', 'required|valid_email');		$this->form_validation->set_rules('admin_first_name', 'First Name', 'required|xss_clean|alpha_dash');		$this->form_validation->set_rules('admin_last_name', 'Last Name', 'required|xss_clean|alpha_dash');		$this->form_validation->set_rules('admin_store_id', 'Store ID', 'required|xss_clean|numeric');				if ($this->form_validation->run() == true) 		{			$data['admin_username'] = $admin_username = $this->input->post('admin_username');			$data['admin_password'] = $admin_password = $this->input->post('admin_password');			$data['admin_email'] = $admin_email = $this->input->post('admin_email');			$data['admin_first_name'] = $admin_first_name = $this->input->post('admin_first_name');			$data['admin_last_name'] = $admin_last_name = $this->input->post('admin_last_name');			$data['admin_store_id'] = $admin_store_id = $this->input->post('admin_store_id');						$data['admin_position'] = $admin_position = 'manager';			//$this->user_model->createNewAdmin($admin_username, $admin_password, $admin_position, $admin_store_id, $admin_email, $admin_first_name, $admin_last_name);						$additional_data = array(				'store_id' => $admin_store_id,				'first_name' => $admin_first_name,				'last_name' => $admin_last_name,				'position' => $admin_position			);						if ($this->user_model->admin_register($admin_username, $admin_password, $admin_email, $additional_data)) {				if ($this->user_model->admin_login($admin_username, $admin_password)) {					redirect('admin/adminPage');				}			}			else			{				redirect('admin/newAdmin');			}		}		else			$this->template->build('admin_register');	}		function addNewItem() {		$data['upload_error'] = false;		$this->template->build('add_new_item', $data);	}		function addNewItemSubmit() {						$this->form_validation->set_rules('add-item-name', 'Item Name', 'required|xss_clean');		$this->form_validation->set_rules('add-manu', 'Key Word', 'required|xss_clean');		$this->form_validation->set_rules('add-barcode', 'Barcode', 'required|xss_clean|length[8]|numeric');		$this->form_validation->set_rules('add-price', 'Cost Price', 'required|xss_clean|numeric');		$this->form_validation->set_rules('add-store', 'Store ID', 'required|xss_clean|integer');		$this->form_validation->set_rules('add-current-stock', 'Current Stock', 'required|xss_clean|numeric');		$this->form_validation->set_rules('add-min-stock', 'Min Stock', 'required|xss_clean|numeric');		$this->form_validation->set_rules('add-max-stock', 'Max Stock', 'required|xss_clean|numeric');		$this->form_validation->set_rules('add-discount', 'Discount', 'required|xss_clean|numeric');								if ($this->form_validation->run() == true)		{			$data['add_item_name'] = $add_item_name = $this->input->post('add-item-name');			$data['add_manu'] = $add_manu = $this->input->post('add-manu');			$data['add_store'] = $add_store = $this->input->post('add-store');			$data['add_category'] = $add_category = $this->input->post('add-category');			$data['add_barcode'] = $add_barcode = $this->input->post('add-barcode');			$data['add_price'] = $add_price = $this->input->post('add-price');			$data['add_production_data'] = $add_production_data = $this->input->post('add-production-date');			$data['add_expired_date'] = $add_expired_date = $this->input->post('add-expired-date');			$data['add_discount'] = $add_discount = $this->input->post('add-discount');			$data['add_current_stock'] = $add_current_stock = $this->input->post('add-current-stock');			$data['add_min_stock'] = $add_min_stock = $this->input->post('add-min-stock');			$data['add_max_stock'] = $add_max_stock = $this->input->post('add-max-stock');									$add_discounted_price = round($add_price * $add_discount, 2);						if ($this->user_model->insertStoreItem($add_store, $add_barcode, $add_manu, $add_item_name, $add_production_data, $add_expired_date, $add_price, $add_category, $add_discount, $add_discounted_price)) {				$this->user_model->insertStock($add_store, $add_barcode, $add_current_stock, $add_min_stock, $add_max_stock);			}									$new_file_name = $add_store.'_'.$add_barcode;			$config['upload_path'] = $this->config->item('img_save_url').'items/';			$config['allowed_types'] = 'jpg';			$config['max_size']	= '1000000';			$config['max_width']  = '1024';			$config['max_height']  = '768';			$config['file_name'] = $new_file_name;			$config['overwrite'] = true;						$this->load->library('upload', $config);			$this->upload->initialize($config);						if(!$this->upload->do_upload()) {				$data['upload_error'] = $upload_error = array('upload_error' => $this->upload->display_errors());				$this->template->build('add_new_item', $data);			}			else {				$data['upload_data'] = $this->upload->data();				$this->template->build('admin_itemAdded', $data);			}		}		else		{				$this->template->build('add_new_item', $data);		}	}		function editItem($barcode, $store_id) {		$data['item'] = $item = $this->user_model->getItemByID($barcode, $store_id);		//$data['hq_i_id'] = $id;		$data['add_item_name'] = $add_item_name = $item['name'];		$data['add_manu'] = $add_manu = $item['manufacturer'];		$data['add_group'] = $add_group = $item['c_main_id'];		$data['add_store'] = $add_store = $item['s_id'];		$data['add_category'] = $add_category = $item['c_id'];		$data['add_barcode'] = $add_barcode = $item['barcode'];		$data['add_price'] = $add_price = $item['price'];		$data['add_production_data'] = $add_production_data = $item['production_date'];		$data['add_expired_date'] = $add_expired_date = $item['expired_date'];		$data['add_discount'] = $add_discount = $item['discount'];		$data['add_current_stock'] = $add_current_stock = $item['current_stock'];		$data['add_min_stock'] = $add_min_stock = $item['min_stock'];		$data['add_max_stock'] = $add_max_stock = $item['max_stock'];				$this->template->build('update_item', $data);	}		function updateItemSubmit($barcode, $store_id) {				$this->form_validation->set_rules('add-item-name', 'Item Name', 'required|xss_clean');		$this->form_validation->set_rules('add-manu', 'Key Word', 'required|xss_clean');		$this->form_validation->set_rules('add-barcode', 'Barcode', 'required|xss_clean|length[8]|numeric');		$this->form_validation->set_rules('add-price', 'Cost Price', 'required|xss_clean|numeric');		$this->form_validation->set_rules('add-store', 'Store ID', 'required|xss_clean|integer');		$this->form_validation->set_rules('add-current-stock', 'Current Stock', 'required|xss_clean|numeric');		$this->form_validation->set_rules('add-min-stock', 'Min Stock', 'required|xss_clean|numeric');		$this->form_validation->set_rules('add-max-stock', 'Max Stock', 'required|xss_clean|numeric');		$this->form_validation->set_rules('add-discount', 'Discount', 'required|xss_clean|numeric');				if ($this->form_validation->run() == true)		{			$data['add_item_name'] = $add_item_name = $this->input->post('add-item-name');			$data['add_manu'] = $add_manu = $this->input->post('add-manu');			$data['add_store'] = $add_store = $this->input->post('add-store');			$data['add_category'] = $add_category = $this->input->post('add-category');			$data['add_barcode'] = $add_barcode = $this->input->post('add-barcode');			$data['add_price'] = $add_price = $this->input->post('add-price');			$data['add_production_data'] = $add_production_data = $this->input->post('add-production-date');			$data['add_expired_date'] = $add_expired_date = $this->input->post('add-expired-date');			$data['add_discount'] = $add_discount = $this->input->post('add-discount');			$data['add_current_stock'] = $add_current_stock = $this->input->post('add-current-stock');			$data['add_min_stock'] = $add_min_stock = $this->input->post('add-min-stock');			$data['add_max_stock'] = $add_max_stock = $this->input->post('add-max-stock');						$add_discounted_price = round($add_price * $add_discount, 2);						$data_array1 = array(				'barcode' => $add_barcode,				'manufacturer' => $add_manu,				'name' => $add_item_name,				'production_date' => $add_production_data,				'expired_date' => $add_expired_date,				'price' => $add_price,				'c_id' => $add_category,				'discount' => $add_discount,				'discounted_price' => $add_discounted_price			);						$data_array2 = array(				's_id' => $add_store,				'barcode' => $add_barcode,				'current_stock' => $add_current_stock,				'min_stock' => $add_min_stock,				'max_stock' => $add_max_stock			);						if ($this->user_model->updateStoreItem($add_store, $barcode, $data_array1)) {				$this->user_model->updateStock($add_store, $add_barcode, $data_array2);			}									$new_file_name = $add_store.'_'.$add_barcode;			$config['upload_path'] = $this->config->item('img_save_url').'items/';			$config['allowed_types'] = 'jpg';			$config['max_size']	= '1000000';			$config['max_width']  = '1024';			$config['max_height']  = '768';			$config['file_name'] = $new_file_name;			$config['overwrite'] = true;						$this->load->library('upload', $config);			$this->upload->initialize($config);						if(!$this->upload->do_upload()) {				$data['upload_error'] = $upload_error = array('upload_error' => $this->upload->display_errors());				//$this->template->build('update_item', $data);				redirect('admin/adminPage');			}			else {				$data['upload_data'] = $this->upload->data();							}						$this->template->build('admin_itemEdited', $data);		}		else		{				$this->template->build('update_item');		}	}		function viewTrans($store_id){		$data['trans'] = $trans = $this->user_model->getAllTrans($store_id);		$this->template->build('admin_trans', $data);			}		function transSearch(){		$this->form_validation->set_rules('trans_keyword', 'Key Word', 'required|xss_clean');				$data = array();		if ($this->form_validation->run() == true) {			$data['trans_keyword'] = $trans_keyword = $this->input->post('trans_keyword');			$data['search_trans_from'] = $search_trans_from = $this->input->post('search_trans_from');			$data['search_trans_to'] = $search_trans_to = $this->input->post('search_trans_to');			$data['trans'] = $this->user_model->getTransSearched($trans_keyword, $search_trans_from, $search_trans_to);						$this->template->build('admin_trans', $data);			}		else 			redirect('admin/viewTrans');	}		function memsSearch() {		$data = array();		$data['mems_keyword'] = $mems_keyword = $this->input->post('mems_keyword');		$data['search_mems_from'] = $search_mems_from = $this->input->post('search_mems_from');		$data['search_mems_to'] = $search_mems_to = $this->input->post('search_mems_to');		$data['search_gender'] = $search_gender = $this->input->post('search_gender');		$data['search_level'] = $search_level = $this->input->post('search_level');		$data['members'] = $members = $this->user_model->getMemsSearched($mems_keyword, $search_mems_from, $search_mems_to, $search_gender, $search_level);				$this->template->build('admin_members', $data);		}		function itemSearch() {		$this->form_validation->set_rules('items_keyword', 'Key Word', 'required|xss_clean');				$data = array();		if ($this->form_validation->run() == true) {			$data['items_keyword'] = $items_keyword = $this->input->post('items_keyword');			$data['search_items_date_from'] = $search_items_date_from = $this->input->post('search_items_date_from');			$data['search_items_date_to'] = $search_items_date_to = $this->input->post('search_items_date_to');			$data['search_items_price_from'] = $search_items_price_from = $this->input->post('search_items_price_from');			$data['search_items_price_to'] = $search_items_price_to = $this->input->post('search_items_price_to');			$data['items'] = $this->user_model->getItemsSearched($items_keyword, $search_items_date_from, $search_items_date_to, $search_items_price_from, $search_items_price_to);			$data['store_id'] = $store_id = $this->session->userdata('store_id');			$this->template->build('admin_items', $data);			}		else 			redirect('admin/viewItems/'.$this->session->userdata('store_id'));	}		function viewMembers() {		$data['members'] = $trans = $this->user_model->getAllMembers();		$this->template->build('admin_members', $data);	}		function deleteMenSuccess() {		$this->template->build('admin_delete_mem_success');	}		function deleteMenFail() {		$this->template->build('admin_delete_mem_fail');	}		function deleteItemSuccess() {		$this->template->build('admin_delete_item_success');	}		function deleteItemFail() {		$this->template->build('admin_delete_item_fail');	}		function insertNewItem() {				$storeNum = 5;		for ($i=0; $i <= $storeNum; $i++) {			$fileName = $this->config->item('file_save_url').$i.'_newitem.txt';						if(file_exists($fileName)) {				$file = fopen($fileName,'r');				while(!feof($file)) { 					$line = fgets($file);					$item_array = explode(':', $line);					//echo $line;					print_r($item_array);					$manufacturer = $item_array[0];					$production_date = $item_array[1];					$expired_date = $item_array[2];					$c_id = $item_array[3];					$name = $item_array[4];					$price = $item_array[5];					$current_stock = $item_array[6];					$min_stock = $item_array[7];					$max_stock = $item_array[8];					$barcode = $item_array[9];					$discount = $item_array[10];					$discounted_price = round($discount * $price, 2);					if(!empty($name)) {						$query2 = "INSERT INTO local_store_".$i."_item (barcode, manufacturer, name, production_date, expired_date, price, c_id, discount, discounted_price) VALUES ('".$barcode."', '".$manufacturer."', '".$name."', '".$production_date."', '".$expired_date."', '".$price."', '".$c_id."', '".$discount."', '".$discounted_price."')";						$query3 = "INSERT INTO stock (s_id, barcode, current_stock, min_stock, max_stock) VALUES ('".$i."', '".$barcode."', '".$current_stock."', '".$min_stock."', '".$max_stock."')";						var_dump($query2);						var_dump($query3);						if(mysql_query($query2) && mysql_query($query3))							echo "insert successfully\n";						else 							echo "insert fail\n";					}				}				fclose($file);			}		}	}		function viewItems($store_id) {		$data['store_id'] = $store_id;		$data['items'] = $items = $this->user_model->getAllItems($store_id);		$this->template->build('admin_items', $data);	}		function deleteItem($barcode, $store_id) {		if($this->user_model->deleteItemByID($barcode, $store_id)) {			redirect('admin/deleteItemSuccess');		}		else			redirect('admin/deleteItemFail');	}		function deleteTran($t_id) {		if($this->user_model->deleteTranByID($t_id)) {			redirect('admin/deleteTranSuccess');		}		else			redirect('admin/deleteTranFail');	}		function deleteTranSuccess() {		$this->template->build('admin_delete_tran_success');	}		function deleteTranFail() {		$this->template->build('admin_delete_tran_fail');	}		function synchronization() {		$this->template->build('admin_syn');	}		function insertNewTran() {		$storeNum = 5;		for ($i=0; $i <= $storeNum; $i++) {			$fileName1 = $this->config->item('file_save_url').$i.'_transaction.txt';			if(file_exists($fileName1)) {				$file1 = fopen($fileName1,'r');				while(!feof($file1)) { 					$line1 = fgets($file1);					$trans_array1 = explode(':', $line1);					$p_name = $trans_array1[3];					if (!empty($p_name)) {							$local_t_id = $trans_array1[0];						$barcode = $trans_array1[1];						$quantity = $trans_array1[2];						$member_id = $trans_array1[4];						print_r ($trans_array1);						//redirect('admin/'.$trans_array);							$query2 = "INSERT INTO transaction (local_t_id, barcode, quantity, p_name, member_card_number) VALUES ('".$local_t_id."', '".$barcode."', '".$quantity."', '".$p_name."', '".$member_id."')";						print_r ($query2);						if(mysql_query($query2)) {							echo "insert transaction successfully\n";							// add points if is member							if($member_id != 0) {								$this->user_model->updateMemPoint($member_id, $barcode, $i, $quantity);							} 						}						else 							echo "insert transaction fail\n";					}				}				fclose($file1);			}		}				for ($j=0; $j <= $storeNum; $j++) {			$fileName = $this->config->item('file_save_url').$j.'_transaction_info.txt';			if(file_exists($fileName)) {				$file = fopen($fileName,'r');				while(!feof($file)) { 					$line = fgets($file);					$trans_array = explode(':', $line);					$a_id = $trans_array[2];					if (!empty($a_id)) {						$t_date = $trans_array[1];						$local_t_id = $trans_array[0];						$s_id = $j; // get the store ID from the txt file						print_r ($trans_array);						$query1 = "INSERT INTO trans_info (local_t_id, t_date, a_id, s_id) VALUES ('".$local_t_id."', '".$t_date."','".$a_id."', '".$s_id."')";						print_r ($query1);						if(mysql_query($query1))							echo "insert trans_info successfully\n";						else 							echo "insert trans_info fail\n";					}				}				fclose($file);			}		}	}		function updateItemFromLocal() {		$storeNum = 5;		for ($i=0; $i <= $storeNum; $i++) {			$fileName = $this->config->item('file_save_url').$i.'_item.txt';			if(file_exists($fileName)) {				$lines = file($fileName); 				$last = sizeof($lines) - 1 ; 				unset($lines[$last]); 				echo "<h3>Items need to restock:</h3>";				echo "<table class='table table-bordered' style='border:1px solid #DDD'>";				echo "<thead ><tr><th>Barcode</th><th>Manufacturer</th><th>Name</th><th>Production Date</th><th>Expired Date</th><th>Usual Price</th><th>Discount</th><th>Current Stock</th><th>Min Stock</th><th>Max Stock</th><th>Discounted Price</th></tr></thead>";				echo "<tbody>";				$file = fopen($fileName,'r');				while(!feof($file)) { 					$line = fgets($file);					$item_array = explode(':', $line);					//print_r($item_array);					$manufacturer = $item_array[0];					$production_date = $item_array[1];					$expired_date = $item_array[2];					$c_id = $item_array[3];					$name = $item_array[4];					$price = $item_array[5];					$current_stock = $item_array[6];					$min_stock = $item_array[7];					$max_stock = $item_array[8];					$barcode = $item_array[9];					$discount = $item_array[10];										$new_price = round($this->user_model->getNewPrice($price, $current_stock, $min_stock), 2);					$discounted_price = round($discount * $new_price, 2);										if($this->user_model->checkStock($current_stock, $min_stock)){  // return true if need to restock						echo "<tr><td>".$barcode."</td><td>".$manufacturer."</td><td>".$name."</td><td>".$production_date."</td><td>".$expired_date."</td><td>".$new_price."</td><td>".$discount."</td><td>".$current_stock."</td><td>".$min_stock."</td><td>".$max_stock."</td><td>".$discounted_price."</td></tr>";					}										if(!empty($name)) {											$data1 = array(						   'manufacturer' => $manufacturer,						   'production_date' => $production_date,						   'expired_date' => $expired_date,						   'c_id' => $c_id,						   'price' => $new_price,  // new price						   'name' => $name,						   'barcode' => $barcode,						   'discount' => $discount,						   'discounted_price' => $discounted_price						);						$this->db->where('barcode', $barcode);						$this->db->update("local_store_".$i."_item", $data1); 												$data2 = array(						   'min_stock' => $min_stock,						   'max_stock' => $max_stock,						   'barcode' => $barcode,						   's_id' => $i,						   'current_stock' => $current_stock						);												$this->db->where(array('s_id'=>$i, 'barcode'=>$barcode));						$this->db->update('stock', $data2); 					}				}				echo "</tbody></table>";				fclose($file);			}		}	}			function sendEmail() {		$data['emails'] = $_REQUEST['data'];		$this->template->build('admin_send_email', $data);	}		function viewOrders() {		$data['orders'] = $this->user_model->getAllOrders($this->session->userdata('store_id'));				$this->template->build('admin_orders', $data);	}}