<?phpclass User_model extends CI_Model {	public function __construct() {		$this->load->database();	}			function isAdmin($username, $password) {			$sql = "SELECT * FROM admin a WHERE a.username = '".$username."' AND a.password = '".$password."' AND a.position = 'manager' ";		$query = $this->db->query($sql);				if ($query->num_rows() == 1)			return true;		else			return false;	}		function getAdmin($username, $password) {		$sql = "SELECT * FROM admin a WHERE a.username = '".$username."' AND a.password = '".$password."' AND a.position = 'manager' ";		$query = $this->db->query($sql);				return $query->row_array();	}		function createNewAdmin($admin_username, $admin_password, $admin_position, $admin_store_id, $admin_email, $admin_first_name, $admin_last_name) {		$sql = "INSERT INTO admin (username, password, position, store_id, first_name, last_name, email) VALUES ('".$admin_username."', '".$admin_password."', '".$admin_position."', '".$admin_store_id."', '".$admin_first_name."', '".$admin_last_name."', '".$admin_email."')";		$this->db->query($sql);	}			// ----------------------------- new member register------------------	public function member_register($username, $password, $email, $additional_data)	{		if ($this->member_email_check($email))		{				$this->set_error('account_creation_duplicate_email');			return FALSE;		}		elseif ($this->member_check($username))		{			$this->set_error('account_creation_duplicate_username');			return FALSE;		}				// Users table.		$data = array(		    'username'   => $username,		    'password'   => $password,		    'email'      => $email		);		//filter out any data passed that doesnt have a matching column in the users table		//and merge the set user data and the additional data		$user_data = array_merge($this->_filter_data('member', $additional_data), $data);		$this->db->insert('member', $user_data);		return TRUE;	}			// --------------------- admin register-------------------	public function admin_register($username, $password, $email, $additional_data)	{		if ($this->admin_email_check($email))		{				$this->set_error('account_creation_duplicate_email');			return FALSE;		}		elseif ($this->admin_check($username))		{			$this->set_error('account_creation_duplicate_username');			return FALSE;		}		// Users table.		$data = array(		    'username'   => $username,		    'password'   => $password,		    'email'      => $email		);		//filter out any data passed that doesnt have a matching column in the users table		//and merge the set user data and the additional data		$user_data = array_merge($this->_filter_data('admin', $additional_data), $data);		$this->db->insert('admin', $user_data);		return TRUE;	}		protected function _filter_data($table, $data)	{		$filtered_data = array();		$columns = $this->db->list_fields($table);		if (is_array($data))		{			foreach ($columns as $column)			{				if (array_key_exists($column, $data))					$filtered_data[$column] = $data[$column];			}		}		return $filtered_data;	}		public function admin_email_check($email)	{		if (empty($email))		{			return FALSE;		}		return $this->db->where('email', $email)		                ->count_all_results('admin') > 0;	}		public function admin_check($username)	{		if (empty($username))		{			return FALSE;		}		return $this->db->where('username', $username)		                ->count_all_results('admin') > 0;	}		public function member_email_check($email)	{		if (empty($email))		{			return FALSE;		}		return $this->db->where('email', $email)		                ->count_all_results('member') > 0;	}		public function member_check($username)	{		if (empty($username))		{			return FALSE;		}		return $this->db->where('username', $username)		                ->count_all_results('member') > 0;	}			// ------------------------- admin login	public function admin_login($username, $password)	{				if (empty($username) || empty($password))		{			$this->set_error('login_unsuccessful');			return FALSE;		}				$query = $this->db->select('*')		                  ->where('username', $username)						  ->where('password', $password)		                  ->get('admin');				if ($query->num_rows() == 1)		{						$user = $query->row();			$session_data = array(				    // 'username'             	=> $user->username,				    // 'email'                	=> $user->email,				    'a_id'             	   	=> $user->a_id,				    // 'last_name'      		=> $user->last_name,					'first_name'			=> $user->first_name,					'position'				=> $user->position,					'store_id'				=> $user->store_id				);			$this->session->set_userdata($session_data);			//$this->set_message('login_successful');			//redirect('admin/'.$query);			return TRUE;		}				$this->set_error('login_unsuccessful');		return FALSE;	}			// ---------------------------------  member login	public function member_login($username, $password)	{				if (empty($username) || empty($password))		{			$this->set_error('login_unsuccessful');			return FALSE;		}				$query = $this->db->select('*')		                  ->where('username', $username)						  ->where('password', $password)		                  ->get('member');				if ($query->num_rows() == 1)		{						$user = $query->row();			$session_data = array(				    'username'             	=> $user->username,				    // 'email'                	=> $user->email,				    'm_id'             	   	=> $user->m_id,				    // 'last_name'      		=> $user->last_name,					'first_name'			=> $user->first_name,					// 'address'				=> $user->address,					// 'gender'				=> $user->gender,					//'member_car_number'     => $user->member_car_number,					// 'created_date'			=> $user->created_date,					// 'expiry_date'			=> $user->expiry_date,					// 'aggregate_point'		=> $usre->aggregate_point,					// 'current_point'			=> $user->current_point,					// 'email_receive'  		=> $user->email_receive,					'store_id'				=> $this->session->userdata('store_id')				);						$this->user_model->updateMenLevelById($user->m_id);						$this->session->set_userdata($session_data);			//$this->set_message('login_successful');			//redirect('admin/'.$query);			return TRUE;		}				$this->set_error('login_unsuccessful');		return FALSE;	}		// ---------------------------- check points and update level	public function updateMenLevelById($m_id) {		$a_point = $this->user_model->getMemById($m_id)->aggregate_point;				if ( 0 <= $a_point && $a_point <= 100)			$level = 1;		else if ( 100 < $a_point && $a_point <= 1000)			$level = 2;		else if ( 1000 < $a_point && $a_point <= 5000)			$level = 3;		else if ( 5000 < $a_point && $a_point <= 10000)			$level = 4;		else 			$level = 5;					$this->db->where('m_id', $m_id);		$this->db->update('member', array('level'=>$level));	}		// -------------------- get admin, member detail if login already	public function admin()	{		$id = NULL;		$id || $id = $this->session->userdata('a_id');		$this->db->limit(1);		$query = $this->db->select('*')		                  ->where('a_id', $id)		                  ->get('admin');		return $query->row_array();	}		public function member()	{		$id = NULL;		$id || $id = $this->session->userdata('m_id');		$this->db->limit(1);		$query = $this->db->select('*')		                  ->where('m_id', $id)		                  ->get('member');		return $query->row_array();	}	// --------------------------------------------------------------			public function addNewItems($add_item_name, $add_manu, $add_group, $category, $add_barcode, $add_price, $add_current_stock, $add_min_stock, $add_max_stock) {				$data = array(		    'username'   => $username,		    'password'   => $password,		    'email'      => $email		);	}		// ----------------------------------- insert category, stock, update item table	function insertCate($category, $add_group) {		$sql = "INSERT INTO category (c_name, c_main_id) VALUES ('".$category."', '".$add_group."')";		$this->db->query($sql);				if ($this->db->insert_id() > 0)			return $this->db->insert_id();		else			return FALSE;	}		function insertStock($add_store, $add_barcode, $add_current_stock, $add_min_stock, $add_max_stock){		$sql = "INSERT INTO stock (s_id, barcode, current_stock, min_stock, max_stock) VALUES ('".$add_store."', '".$add_barcode."', '".$add_current_stock."', '".$add_min_stock."', '".$add_max_stock."' )";		$this->db->query($sql);				return TRUE;	}		function insertStoreItem($add_store, $add_barcode, $add_manu, $add_item_name, $add_production_data, $add_expired_date, $add_price, $add_category, $add_discount, $add_discounted_price) {		$sql = "INSERT INTO local_store_".$add_store."_item (barcode, manufacturer, name, production_date, expired_date, price, c_id, discount, discounted_price) VALUES ('".$add_barcode."', '".$add_manu."', '".$add_item_name."', '".$add_production_data."', '".$add_expired_date."', '".$add_price."', '".$add_category."', '".$add_discount."', '".$add_discounted_price."')";		$this->db->query($sql);				return TRUE;	}		function updateStoreItem($add_store, $barcode, $data_array1) {		$this->db->where('barcode', $barcode);		$this->db->update("local_store_".$add_store."_item", $data_array1); 				return TRUE;	}		function updateStock($add_store, $add_barcode, $data_array2) {		$this->db->where(array('barcode'=>$add_barcode, 's_id'=>$add_store));		$this->db->update('stock', $data_array2); 				return TRUE;	}	// -----------------------------------------------------------------				// ---------------------------- get, delete itme, member, transaction by id, get all	function getItemByID($barcode, $store_id) {		$sql = "SELECT * FROM local_store_".$store_id."_item i, category c, stock s WHERE i.barcode = '".$barcode."' AND i.c_id = c.c_id AND i.barcode = s.barcode AND s.s_id = '".$store_id."' ";		$query = $this->db->query($sql);				if($query->num_rows() == 1)			return $query->row_array();		else			return FALSE;	}		public function getMemberByID($m_id) {		$query = $this->db->get_where('member', array('m_id'=>$m_id));		if($query->num_rows() == 1)			return $query->row_array();		else			return FALSE;	}		public function deleteMemberByID($m_id) {		$query = "DELETE FROM member WHERE m_id = $m_id";		if(mysql_query($query))			return TRUE;		else 			return FALSE;	}		public function deleteItemByID($barcode, $store_id) {		$query1 = "DELETE FROM local_store_".$store_id."_item WHERE barcode = $barcode";		$query2 = "DELETE FROM stock WHERE barcode = $barcode AND s_id = '".$store_id."' ";		if(mysql_query($query1) && mysql_query($query1))			return TRUE;		else 			return FALSE;	}		public function deleteTranByID($t_id) {		$query1 = "DELETE FROM transaction WHERE t_id = $t_id";		$local_t_id = $this->user_model->getTransTID($t_id);		if(mysql_query($query1)) {			if($this->user_model->getTransaction($local_t_id)) {				$query2 = "DELETE FROM trans_info WHERE local_t_id = $local_t_id ";				mysql_query($query2);			}			return TRUE;		}		else 			return FALSE;	}		public function getTransTID($t_id) {		$sql = "SELECT local_t_id FROM transaction WHERE t_id = $t_id LIMIT 0, 1";		$query = $this->db->query($sql);				return $query->row()->local_t_id;	}		public function getTransaction($local_t_id) {		$query = $this->db->get_where('transaction', array('local_t_id'=>$local_t_id));		if($query->num_rows() > 0)			return FALSE;		return TRUE;	}		public function getAllTrans($store_id) {		$sql = "SELECT * FROM transaction t, trans_info i WHERE t.local_t_id = i.local_t_id AND i.s_id = '".$store_id."' ORDER BY i.t_date DESC LIMIT 0, 100";		$query = $this->db->query($sql);				return $query->result_array();	}		public function getAllMembers() {		$sql = "SELECT * FROM member LIMIT 0, 100";		$query = $this->db->query($sql);				return $query->result_array();	}		public function getAllOrders($store_id) {		$sql = "SELECT * FROM `local_store_".$store_id."_item` l, `order` o, `member` m WHERE l.barcode = o.barcode AND m.m_id = o.m_id";				$query = $this->db->query($sql);				return $query->result_array();	}		// ---------------------- get searched transactions, items, members------	public function getTransSearched($trans_keyword, $search_trans_from, $search_trans_to) {		if (empty($search_trans_from)) {			$date_from = strtotime('2000-01-01');		}		else {			$date_from = strtotime($search_trans_from);		}				if (empty($search_trans_to)) {			$today = getdate(); // today			$date_to = strtotime($today['year'].'-'.$today['mon'].'-'.$today['mday']);		}		else {			$date_to = strtotime($search_trans_to);		}		$sql = "SELECT * FROM transaction t, trans_info i WHERE (t.local_t_id = i.local_t_id AND i.s_id = '".$this->session->userdata('store_id')."' AND t.p_name LIKE '%".$trans_keyword."%') OR (t.local_t_id = i.local_t_id AND i.s_id = '".$this->session->userdata('store_id')."' AND t.local_t_id LIKE '%".$trans_keyword."%') OR (t.local_t_id = i.local_t_id AND i.s_id = '".$this->session->userdata('store_id')."' AND t.barcode LIKE '%".$trans_keyword."%') OR (t.local_t_id = i.local_t_id AND i.s_id = '".$this->session->userdata('store_id')."' AND i.a_id LIKE '%".$trans_keyword."%') ORDER BY i.t_date DESC";		$query = $this->db->query($sql);				$all_trans = $query->result_array();		$search_trans = array();		foreach($all_trans as $key => $tran) {			if(strtotime($tran['t_date']) <= $date_to && strtotime($tran['t_date']) >= $date_from)			{				array_push($search_trans, $tran);			}		}		return $search_trans;	}		public function getItemsSearched($items_keyword, $search_items_date_from, $search_items_date_to, $search_items_price_from, $search_items_price_to) {		if (empty($search_items_date_from)) {			$date_from = strtotime('0000-00-00');		}		else {			$date_from = strtotime($search_items_date_from);		}				if (empty($search_items_date_to)) {			$today = getdate(); // today			$date_to = strtotime($today['year'].'-'.$today['mon'].'-'.$today['mday']);		}		else {			$date_to = strtotime($search_items_date_to);		}				if (empty($search_items_price_from)) {			$price_from = 0;		}		else {			$price_from = $search_items_price_from;		}				if (empty($search_items_price_to)) {			$price_to = 10000;		}		else {			$price_to = $search_items_price_to;		}				$store_id = $this->session->userdata('store_id');		$sql = "SELECT * FROM local_store_".$store_id."_item l, stock s, category c, category_main cm WHERE (l.barcode = s.barcode AND s.s_id = '".$store_id."' AND l.c_id = c.c_id AND c.c_main_id = cm.c_main_id AND l.barcode LIKE '%".$items_keyword."%') OR (l.barcode = s.barcode AND s.s_id = '".$store_id."' AND l.c_id = c.c_id AND c.c_main_id = cm.c_main_id AND l.manufacturer LIKE '%".$items_keyword."%') OR (l.barcode = s.barcode AND s.s_id = '".$store_id."' AND l.c_id = c.c_id AND c.c_main_id = cm.c_main_id AND l.name LIKE '%".$items_keyword."%') OR (l.barcode = s.barcode AND s.s_id = '".$store_id."' AND l.c_id = c.c_id AND c.c_main_id = cm.c_main_id AND c.c_name LIKE '%".$items_keyword."%') OR (l.barcode = s.barcode AND s.s_id = '".$store_id."' AND l.c_id = c.c_id AND c.c_main_id = cm.c_main_id AND cm.c_main_name LIKE '%".$items_keyword."%')";		$query = $this->db->query($sql);				$all_items = $query->result_array();		$search_items = array();		//print_r($all_items);		foreach($all_items as $key => $item) {			//redirect('admin/'.strtotime($item['production_date']));			if(strtotime($item['production_date']) <= $date_to && strtotime($item['expired_date']) >= $date_from && $item['discounted_price'] <= $price_to && $item['discounted_price'] >= $price_from)			{				array_push($search_items, $item);			}		}		return $search_items;	}		public function getMemsSearched($mems_keyword, $search_mems_from, $search_mems_to, $search_gender, $search_level) {		if (empty($search_mems_from)) {			$date_from = strtotime('0000-00-00');		}		else {			$date_from = strtotime($search_mems_from);		}				if (empty($search_mems_to)) {			$today = getdate(); // today			$date_to = strtotime($today['year'].'-'.$today['mon'].'-'.$today['mday']);		}		else {			$date_to = strtotime($search_mems_to);		}				$search_mems = array();		if ($search_gender == 'null' && $mems_keyword == '' && $search_level == 'null') {			$sql = "SELECT * FROM member";			$query = $this->db->query($sql);			$all_mems = $query->result_array();			// redirect('hello');			foreach($all_mems as $key => $mem) {				if(strtotime($mem['created_date']) <= $date_to && strtotime($mem['expiry_date']) >= $date_from)				{					array_push($search_mems, $mem);				}			}			return $search_mems;		}		else if($search_gender != 'null' && $mems_keyword == '' && $search_level == 'null') {			$sql = "SELECT * FROM member m WHERE m.gender = '".$search_gender."'";			$query = $this->db->query($sql);			$all_mems = $query->result_array();			// redirect('hello1');			foreach($all_mems as $key => $mem) {				if(strtotime($mem['created_date']) <= $date_to && strtotime($mem['expiry_date']) >= $date_from)				{					array_push($search_mems, $mem);				}			}			return $search_mems;		}		else if($search_gender == 'null' && $mems_keyword != '' && $search_level == 'null') {			$sql = "SELECT * FROM member m WHERE (m.email LIKE '%".$mems_keyword."%') OR (m.username LIKE '%".$mems_keyword."%') OR (m.first_name LIKE '%".$mems_keyword."%') OR (m.last_name LIKE '%".$mems_keyword."%') OR (m.member_card_number LIKE '%".$mems_keyword."%')";			$query = $this->db->query($sql);			$all_mems = $query->result_array();			// redirect('hello2');			foreach($all_mems as $key => $mem) {				if(strtotime($mem['created_date']) <= $date_to && strtotime($mem['expiry_date']) >= $date_from)				{					array_push($search_mems, $mem);				}			}			return $search_mems;		}		else if($search_gender == 'null' && $mems_keyword == '' && $search_level != 'null') {			$sql = "SELECT * FROM member m WHERE m.level = '".$search_level."'";			$query = $this->db->query($sql);			$all_mems = $query->result_array();			// redirect('hello3');			foreach($all_mems as $key => $mem) {				if(strtotime($mem['created_date']) <= $date_to && strtotime($mem['expiry_date']) >= $date_from)				{					array_push($search_mems, $mem);				}			}			return $search_mems;		}		else if($search_gender != 'null' && $mems_keyword != '' && $search_level == 'null') {			$sql = "SELECT * FROM member m WHERE (m.gender = '".$search_gender."' AND m.email LIKE '%".$mems_keyword."%') OR (m.gender = '".$search_gender."' AND  m.username LIKE '%".$mems_keyword."%') OR ( m.gender = '".$search_gender."' AND  m.first_name LIKE '%".$mems_keyword."%') OR (m.gender = '".$search_gender."' AND  m.last_name LIKE '%".$mems_keyword."%') OR ( m.gender = '".$search_gender."' AND  m.member_card_number LIKE '%".$mems_keyword."%')";			$query = $this->db->query($sql);			$all_mems = $query->result_array();			// redirect('hell4');			foreach($all_mems as $key => $mem) {				if(strtotime($mem['created_date']) <= $date_to && strtotime($mem['expiry_date']) >= $date_from)				{					array_push($search_mems, $mem);				}			}			return $search_mems;		}		else if($search_gender != 'null' && $mems_keyword == '' && $search_level != 'null') {			$sql = "SELECT * FROM member m WHERE m.gender = '".$search_gender."' AND m.level = '".$search_level."'";			$query = $this->db->query($sql);			$all_mems = $query->result_array();			// redirect('hello5');			foreach($all_mems as $key => $mem) {				if(strtotime($mem['created_date']) <= $date_to && strtotime($mem['expiry_date']) >= $date_from)				{					array_push($search_mems, $mem);				}			}			return $search_mems;		}		else if($search_gender == 'null' && $mems_keyword != '' && $search_level != 'null') {			$sql = "SELECT * FROM member m WHERE (m.level = '".$search_level."' AND m.email LIKE '%".$mems_keyword."%') OR (m.level = '".$search_level."' AND  m.username LIKE '%".$mems_keyword."%') OR ( m.level = '".$search_level."' AND  m.first_name LIKE '%".$mems_keyword."%') OR (m.level = '".$search_level."' AND  m.last_name LIKE '%".$mems_keyword."%') OR ( m.level = '".$search_level."' AND  m.member_card_number LIKE '%".$mems_keyword."%')";			$query = $this->db->query($sql);			$all_mems = $query->result_array();			// redirect('hello6');			foreach($all_mems as $key => $mem) {				if(strtotime($mem['created_date']) <= $date_to && strtotime($mem['expiry_date']) >= $date_from)				{					array_push($search_mems, $mem);				}			}			return $search_mems;		}	}		// --------------------------------------------------------------------			// ---------------------------- send pass word to new user by email	public function emailPasswordEmail($email, $password, $member_card_number, $last_name, $username, $title) {		$this->email->clear();		$this->email->from('team10@ceghypermarket.com', 'Wang Zihao');		$this->email->to($email);		$this->email->subject('Password & Membercard ID');		$this->email->message("<p>Dear ".$title." ".$last_name.",</p><br><p>Thank you for registration as member of CEGhypermarket!!</p><p>You account credential is as below:</p><br><p>account: ".$username."</p><p>password: ".$password."</p><p>member card nember: ".$member_card_number."</p><br><p>Hope you have a great time shopping with us!</p><br><br><P>Best Regards,</p><p>CEGhypermarket team</p>");				$this->email->send();		$err = $this->email->print_debugger();		echo $err;	}	// -----------------------------------		public function get_random_password($chars_min, $chars_max, $use_upper_case, $include_numbers, $include_special_chars)    {        $length = rand($chars_min, $chars_max);        $selection = 'aeuoyibcdfghjklmnpqrstvwxz';        if($include_numbers) {            $selection .= "1234567890";        }        if($include_special_chars) {            $selection .= "!@\"#$%&[]{}?|";        }                                        $password = "";        for($i=0; $i<$length; $i++) {            $current_letter = $use_upper_case ? (rand(0,1) ? strtoupper($selection[(rand() % strlen($selection))]) : $selection[(rand() % strlen($selection))]) : $selection[(rand() % strlen($selection))];                        $password .=  $current_letter;        }                                return $password;    }		public function getAllItems($store_id) {		$sql = "SELECT * FROM local_store_".$store_id."_item l, stock s, category c, category_main cm WHERE l.barcode = s.barcode AND s.s_id = '".$store_id."' AND l.c_id = c.c_id AND c.c_main_id = cm.c_main_id LIMIT 0, 100";		$query = $this->db->query($sql);				return $query->result_array();	}			// ---------------------- active pricing algorithm, get new price by compare the stocks	public function getNewPrice($price, $current_stock, $min_stock){				return $price*(1 - ((($current_stock - $min_stock)/$min_stock)/10));	}		public function checkStock($current_stock, $min_stock) {		if(($current_stock - $min_stock)/$min_stock <= 0.1)			return TRUE;		else			return FALSE;	}		//--------------------  member update	public function memberUpdate($m_id, $m_data) {		$this->db->where('m_id', $m_id);		$this->db->update('member', $m_data); 	}		public function updateMemPoint($member_id, $barcode, $i, $quantity) {		$price = $this->user_model->getItemPrice($i, $barcode);		$point = round($price*$quantity, 0);				$member = $this->user_model->getMemByCardID($member_id);		$a_piont = $member->aggregate_point;		$c_point = $member->current_point;				$new_a_point = $a_piont + $point;		$new_c_point = $c_point + $point;				$data_array = array(			'aggregate_point' => $new_a_point,			'current_point' => $new_c_point		);				$this->db->where('member_card_number', $member_id);		$this->db->update('member', $data_array);	}	// -------------------------------------		public function getItemPrice($i, $barcode) {		$query = $this->db->get_where("local_store_".$i."_item", array('barcode'=>$barcode), 1);				return $query->row()->discounted_price;	}		// --------------------------get member data	public function getMemByCardID($member_id) {		$query = $this->db->get_where('member', array('member_card_number'=>$member_id), 1);				return $query->row();	}		public function getMemById($m_id) {		$query = $this->db->get_where('member', array('m_id'=>$m_id), 1);				return $query->row();	}	// ------------------------------------------		// -----------------online shopping	public function getItemByBarcode($store_id) {		$sql = "SELECT * FROM `local_store_".$store_id."_item` l, `order` o WHERE l.barcode = o.barcode AND o.m_id = '".$this->session->userdata('m_id')."' AND o.status = 'pending' ";				$query = $this->db->query($sql);				return $query->result_array();	}		public function insertOrder($m_id, $barcode, $store_id, $quantity) {		$sql = "INSERT INTO `order` (`m_id`, `barcode`,`store_id`, `quantity`, `status`) " . 			   " VALUES ('".$m_id."', '".$barcode."', '".$store_id."', '".$quantity."', 'pending')";					if (mysql_query($sql))			return TRUE;		else			return FALSE;	}}